[user]
	name = {{ gituser_name }}
	email = {{ gituser_email }}

[init]
	defaultBranch = main

[alias]
	# Unstage anything staged right now.
	unstage = reset -q HEAD --

	# Throw out any modifications to tracked files.
	discard = checkout --

	# Pretend that last commit was never committed.
	uncommit = reset --mixed HEAD~

	# Show me a graph or what's been going on recently; last 10 commits
	graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order

	# To run before a commit, see what is about to be committed.
	precommit = diff --cached --diff-algorithm=minimal -w

	# NOTE: can use -M to detect moves, so you don't get an entire
	# file of `-` and then a file of `+`.
	# git diff --staged -M

	# Pretty log output with lot of info
	# also use "lg -p" to see it with patches for each commit.
	lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate=full

	# See the pretty log output but include the name/status of changed paths.
	lgv = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate=full --name-status

	# Not yet added - doesn't include ignored files
	new = ls-files --others --exclude-standard

	# Files that are in the staging area
	added = diff --cached --name-only

	# Git log of last 24 hours
	today = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative

	# Which tag am I on, or the nearest ancestor?
	# `git describe` might also be an option here.
	whichtag = !git name-rev --tags --name-only $(git rev-parse HEAD)

	# List (local) branches sorted by date of last commit
	branchesbydate = !git for-each-ref --sort='-committerdate' --format='%(committerdate)  %(refname)' refs/heads | sed -e 's,refs/heads/,,'

	# Show file create/remove changes in the diff
	filechanges = diff --summary

	# Show SHA of HEAD, or of passed ref
	id   = log --pretty=format:'%H' -n 1
	hash = log --pretty=format:'%H' -n 1
	undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"

	# Follow the history of a single file
	follow = log --follow -p --

[core]
	pager = less
	editor = vim
	quotepath = false
	excludesfile = ~/.gitignore

[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = auto

[github]
	user = tangledhelix

[diff]
	# For Github-style word diffs
	wordRegex = [^[:space:]]

[push]
	# Push current branch even if you've never pushed it before
	default = current

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge --skip %f
	process = git-lfs filter-process --skip

[difftool]
	prompt = false

[mergetool]
	prompt = false

[fetch]
	prune = true

[credential]
	helper = osxkeychain

[pull]
	rebase = true
