#!/usr/bin/env perl

# randpass: Generates random strings of 16 characters, to be used as
# user's initial password.
#
# -c    Copy to Mac clipboard
# -e    Also print encrypted hash
# -h    Print this help
# -s    Limit password to 8 characters (instead of 16)
#
# Ported to Perl from original C

use strict;
use warnings;

use Getopt::Std;

sub print_help {

    print <<_EOF_;
Usage: $0 [-h] [-c] [-s]

    -h : print this help
    -c : copy to Mac clipboard
    -e : also print encrypted hash
    -s : limit to 8 characters instead of 12

If using -e and -c, the plaintext is what's copied.
_EOF_

    exit 0;
}

my $chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!^#()*';

# If you use -c, the string will be copied into the pasteboard.
# Using -s limits to 8 chars instead of 12.
getopts 'cehs', \my %opt;

if ($opt{h}) {
    print_help();
}

my $pwLength = 16;
if ($opt{s}) {
    $pwLength = 8;
}

srand(time() ^ ($$ + ($$ << 15)));

my $i;
my $pword;

for ($i = 0; $i <= ($pwLength - 1); $i++) {
    $pword .= substr($chars, rand(length($chars)), 1);
}

if ($opt{c}) {
    open my $fh, '| /usr/bin/pbcopy -pboard general'
        or die 'Unable to open pbcopy pipe';
    print $fh $pword;
}

print $pword, "\n";

if ($opt{e}) {
    my $salt = chr(rand(23) + 65) . chr(rand(23) + 65);
    print '{crypt}', crypt($pword, $salt), "\n";
}

