# Set the list of directories that Zsh searches for programs.
path=()

path_candidates=(
    /opt/gums/bin
    /home/eng/config/tools/bin
    /home/eng/bin
    ~/config/tools/mpls
    ~/config/tools/scripts
    /opt/gums/sbin
    ~/local/bin
    ~/bin
    /usr/local/share/npm/bin
    /opt/homebrew/{bin,sbin}
    /usr/local/{bin,sbin}
    /usr/{bin,sbin}
    /{bin,sbin}
    /usr/proc/bin
    /usr/lib/mailman/bin
    /opt/openldap/{bin,sbin}
    /usr/sfw/bin
    /opt/X11/bin
    /usr/X11R6/bin
    /opt/puppetlabs/bin
    ~/tools
    ~/.cabal/bin
)

for path_candidate in $path_candidates; do
    [[ -d $path_candidate ]] && path+=$path_candidate
done

for path_file in /etc/paths.d/*(.N); do
    path+=($(<$path_file))
done
unset path_file

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes

# Good multiline git prompt
# Pros:
# - bundled with omz
# - user@host
# - shows CWD
# - shows git info, when in a repo
# - colors work with my scheme
# - shows $? if non-zero
# Cons:
# - $? is in RPROMPT, annoying for pasting
#ZSH_THEME="kphoen"

# Good multiline git prompt
# Pros:
# - bundled with omz
# - user@host
# - shows CWD
# - shows git info, when in a repo
# - shows timestamp
# - colors work with my scheme
# - changes color if you're root
# Cons:
# - git info, timestamp are in RPROMPT, annoying for pasting
# - long paths aren't truncated
# - no $? info (as compared to kphoen)
#ZSH_THEME="bureau"

# This theme has a multiline prompt and git integration
# Pros:
# - bundled with omz
# - user@host, only when remote
# - shows git info, including status icons and short-sha1
# - shows $? status
# - shows CWD
# - long CWD gets truncated so your prompt doesn't overflow
# - changes color of prompt when you're root
# - colors work well in my scheme
# Cons:
# - git hash and $? are in RPROMPT, can be annoying for pasting
# - CWD limited to last 3 atoms of path... only kind of a con
ZSH_THEME="avit"

# This one feels homey, I'm used to it, but the colors aren't
# all great on a light background
#ZSH_THEME="steeef"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# User at host, path, git branch, some git status. maybe.
# Prompt chars are utf8, bit odd.
#ZSH_THEME="dstufft"

# User at host, path, git bfanch, some git status, error RPROMPT. Maybe.
#ZSH_THEME="lukerandall"

# Shows ssh.. user@host, path, git status, last exit code. multiline.
ZSH_THEME="mortalscumbag"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
if [[ "$(uname -s)" != "Darwin" ]]; then
    DISABLE_AUTO_TITLE="true"
fi

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#
# If the Docker plugin is enabled on macOS, it breaks the new
# "pause" feature in Docker Desktop 4.2. (Well, not breaks...
# but it will unpause every time you trigger your shell prompt...)
plugins=(
    git
    common-aliases
    colored-man-pages
    docker
    docker-compose
    kubectl
    zsh-autosuggestions
    zsh-syntax-highlighting
)
# NOTE: zsh-syntax-highlighting must be last in the list
#
# Possible ones to enable later:
# ssh-agent
# gpg-agent
# keychain

# Turn off the completion security check. This thing complains about
# group/other-writable directories, but they're really symlinks that
# point to non-problematic directories (stuff in homebrew).
# Turns out it's not just homebrew. It also complains about oh-my-zsh,
# even if those directories are completely owned by me and 0700.
# So this check is just broken, apparently?
ZSH_DISABLE_COMPFIX="true"

# Suggestion strategy can be history, completion, match_prev_cmd,
# or any combination of those three. See zsh-autosuggestions documentation.
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

source $ZSH/oh-my-zsh.sh

# User configuration

# Set the list of directories that man searches for manuals.
manpath=(
    /opt/gums/man
    /opt/homebrew/share/man
    /usr/local/man
    /usr/man
    /usr/local/share/man
    /usr/share/man
    /usr/local/pkg/perl/man
    /usr/dt/man
    /usr/openwin/man
    /usr/sfw/man
    ~/local/man
    ~/local/share/man
    ~/.cabal/share/man
    $manpath
)

for path_file in /etc/manpaths.d/*(.N); do
    manpath+=($(<$path_file))
done
unset path_file

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# I only use Neovim on macOS because on most linux distros it's old.
# Maybe in a few more years...
if [[ "$(uname -s)" = "Darwin" && -n "$(command -v nvim)" ]]; then
    export EDITOR="nvim"
    alias vim="nvim"
    alias vi="nvim"
    alias view="nvim -R"
elif [[ -n "$(command -v vim)" ]]; then
    export EDITOR="vim"
    alias vi="vim"
    alias view="vim -R"
else
    export EDITOR="vi"
    alias vim="vi"
    alias view="vi"
fi

export VISUAL="$EDITOR"
export PAGER="less"

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

if [[ -x /usr/local/bin/npm && -d /usr/local/lib/node_modules ]]; then
    export NODE_PATH='/usr/local/lib/node_modules'
fi
if [[ -x /opt/homebrew/bin/npm && -d /opt/homebrew/lib/node_modules ]]; then
    export NODE_PATH='/opt/homebrew/lib/node_modules'
fi

# Set the default Less options.
#
# For now just turn this off. It screws up git log. That annoys the heck
# out of me. Can add options back as needed, but any time adding one,
# need to check that it does not screw up git log. Symptom: in a git log
# where the first page has a line longer than the terminal width, the line
# will wrap, but that causes the first line to go off the top of the screen.
# It works fine if $LESS is not defined at all.
#
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
#
# Removed -S, don't want no-wrap by default (use less-nowrap for that)
# Added -x 4, to get 4-position as tab stop
# Removed -F, it doesn't play well in a loop where you less, then vim...
# Changed -R to -r because european accented letters were coming in as bracketed
#
# Added -n because I often page over huge log files
#
#export LESS='-g -i -M -r -w -X -x 4 -z-4'
#export LESS="-R -i"
export LESS="-RiFXn"

export ACK_PAGER="less"

export CVS_RSH="ssh"
[[ -d /home/eng/.CVS ]] && export CVSROOT="/home/eng/.CVS"

# Avoid an RCS checkin log headache
[[ -n "$SUDO_USER" ]] && export LOGNAME="$SUDO_USER"

# Enable prompt: empty value
# Disable prompt: set to 1
export VIRTUAL_ENV_DISABLE_PROMPT=
# Auto-activate virtualenv when entering directory
#_virtualenv_auto_activate() {
#    if [ -d "venv" ]; then
#        # Check to see if already activated to avoid redundant activating
#        if [ "$VIRTUAL_ENV" != "$(pwd -P)/venv" ]; then
#            export _VENV_NAME=${$(pwd):t}
#            echo Activating virtualenv \"$_VENV_NAME\"...
#            export VIRTUAL_ENV_DISABLE_PROMPT=1
#            source venv/bin/activate
#        fi
#    fi
#}

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Show me time in GMT / UTC
alias utc='TZ=UTC date'
alias gmt='TZ=GMT date'

# translate AS/RR numbers
astr() { echo "$1" | tr '[A-J0-9]' '[0-9A-J]' }

alias ack='ack --smart-case'

# globbing cheat sheet
globcheat() {

    echo
    echo '**/ recurse   ***/ follow symlinks   class: [...]   neg: [^...] or [!...]'
    echo
    echo '/ dir  . file  * exec  @ symlink  = socket  p pipe  % device %b block %c char'
    echo
    echo 'r u:read   w u:write   x u:exec   U owner-is-my-uid   u123 owner is uid 123'
    echo 'A g:read   I g:write   E g:exec   G group-is-my-gid   u:dan: owner is dan'
    echo 'R o:read   W o:write   X o:exec                       or g123, g:dan:'
    echo
    echo 'm mtime   default period is days    + or - a value      mw-1 in past week'
    echo 'a atime   M month  w week  h hour  m minute  s second   aM-1 in past month'
    echo
    echo 'L file size (bytes)   k kbytes  m mbytes  p blocks   Lm+1 = larger than 1mb'
    echo
    echo '*(u0WLk+10m0) owner root, world write, > 10KB, mtime in past hour'

}

alias cless='colordiff | less'

# fix ssh setup in a reattached tmux environment
fixssh() {
    for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
        if (tmux show-environment | grep "^${key}" > /dev/null); then
            value=`tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//"`
            export ${key}="${value}"
        fi
    done
}

# http://perlbrew.pl
if [ -f ~/perl5/perlbrew/etc/bashrc ]; then
    source ~/perl5/perlbrew/etc/bashrc
fi

if [[ $UID -eq 0 ]]; then

    ### Things to do only if I am root

    # Messes with rdist and probably other stuff
    unset SSH_AUTH_SOCK

else

    ### Things to do only if I am not root

    if [[ -n "$(command -v tmux)" ]]; then

        # Always support UTF-8
        alias tmux='tmux -u'

        tmux_ls() {
            echo "\n-- tmux sessions --\n$(tmux ls 2>/dev/null)"
        }

        # tmux ls >/dev/null 2>&1
        # _tmux_exit=$?

        # If we're on an ssh/mosh connection, either attach to an existing
        # tmux, or create a new tmux.
        # if [[ -n "$SSH_CONNECTION" && -z "$TMUX" ]]; then
        #     if [[ $_tmux_exit -eq 0 ]]; then
        #         tmux attach-session -t zmux
        #     else
        #         tmux new-session -s zmux
        #     fi
        # fi

        # List tmux sessions
        if [[ -z "$TMUX" && -n "$(tmux ls 2>/dev/null)" ]]; then
            tmux_ls
        fi

        # tmux magic alias to list, show, or attach
        # tm() {
        #     [[ -z "$1" ]] && { tmux_ls; return }
        #     local _detach_flag
        #     if [[ "$1" = "-d" ]]; then
        #         _detach_flag="-d"
        #         shift
        #     fi
        #     export STY="[$1] $(uname -n)"
        #     tmux -u new -s "$1" || tmux -u att $_detach_flag -t "$1"
        # }

    fi

fi

# Mac-specific things
if [[ "$(uname -s)" != "Darwin" ]]; then
    alias ldd='otool -L'

    # This shows which processes are using the network right now.
    alias netusers='lsof -P -i -n | cut -f 1 -d " " | uniq'

    # This lets you use the keychain for https urls in Git
    alias gitkeychain='git config credential.helper osxkeychain'

    if [ -d /opt/homebrew ]; then
        export HOMEBREW_PREFIX="/opt/homebrew"
        export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
    fi
fi

unsetopt SHARE_HISTORY

# gotta wear out the Esc key somehow
bindkey -v

# C-space or C-f will accept the currently shown suggestion.
# So will the right arrow, by default, in -e or -v modes.
# C-f is also usable by default, only in -e mode.
bindkey '^ ' autosuggest-accept
#bindkey '^f' autosuggest-accept

# How to add ^n, ^p for navigating history, if I keep using them in -v mode
#bindkey '^p' up-history
#bindkey '^n' down-history

# starship isn't installed in all of my environments
if [[ -n "$(command -v starship)" ]]; then
    eval "$(starship init zsh)"
fi

# local settings override global ones
if [[ -s $HOME/.zshrc.local ]]; then
    source $HOME/.zshrc.local
fi

