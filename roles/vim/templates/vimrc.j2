set nocompatible
autocmd!

" Use automatic regex engine (0) rather than selecting one.
" Hopefully this avoids the error:
" E363: pattern uses more memory than 'maxmempattern'
set re=0

" Let % match if/elsif/else/end, open/close, XML tags, etc.
runtime macros/matchit.vim

if has('unix')
    let s:uname = system('uname')
    if s:uname == "Darwin\n"
        let s:has_darwin = 1
    endif
endif

" https://github.com/tpope/vim-pathogen
let g:pathogen_disabled = []

let g:mapleader = ' '

filetype off
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on

" Configure persistent undo data in a local directory
if has("persistent_undo")
   let target_path = expand('~/.undodir')

    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call mkdir(target_path, "p", 0700)
    endif

    let &undodir=target_path
    set undofile
endif

" Turn on mouse support
set mouse=a

" Allow 'hidden' buffers. :help hidden
set hidden

" Ignore whitespace-only changes in diff mode
set diffopt=iwhite

let g:sql_type_default = 'pgsql'

" Use more natural key movement on wrapped lines.
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Sometimes Esc is soooooo faaaaaar awaaaaaay
inoremap jj <Esc>

" Bubble lines up / down, with reindenting
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Define 'del' char to be the same backspace (saves a LOT of trouble!)
" As the angle notation cannot be use with the LeftHandSide
" with mappings you must type this in *literally*!
" map <c-v>127 <c-h>
" cmap <c-v>127 <c-h>
inoremap  <c-h>
cnoremap  <c-h>
" the same for Linux Debian which uses
inoremap <esc>[3~ <c-h>
cnoremap <esc>[3~ <c-h>

" Change the cursor shape based on mode. Assumes iTerm2 on macOS.
" https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" go to location of last change
nnoremap gl `.

set noerrorbells
set visualbell

" Kind of messages to show. Abbreviate them all.
set shortmess=atI

" Show a report when N lines were changed. report=0 means 'show all changes'.
set report=0

" Always show the status bar
set laststatus=2

" Show the current mode (INSERT, REPLACE, VISUAL, paste, etc.)
set showmode

" Show current uncompleted command.
set showcmd

" Don't set the title, it will wipe out the old one (e.g. hostname)
" and not restore it on exit.
set notitle

" Show current cursor line position
set cursorline

" Show row/col of cursor position, and percentage into the file we are.
set ruler

" Restore cursor position from our last session, if known.
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line('$') | execute 'normal! g`"zvzz' | endif

" Only show the 'margin' column in insert mode
if exists('&colorcolumn')
    autocmd InsertEnter * set colorcolumn=80
    autocmd InsertLeave * set colorcolumn=""
endif

" tab/indent settings
set expandtab
set tabstop=8
set softtabstop=4
set shiftwidth=4

" When changing indent with <, >, >>, <<, use a multiple of shiftwidth.
set shiftround

" Keep selection when indent/dedenting in select mode.
vnoremap > >gv
vnoremap < <gv

" Text formatting options, used by 'gq', 'gw' and elsewhere. :help fo-table
set formatoptions=qrn1

" Insert two spaces after a period with every joining of lines? No!
set nojoinspaces

" I use Vim mostly to write code. This doesn't auto-wrap lines, it only does
" a soft wrap to the window width.
set wrap

" No fixed width; 0 means to use the current window width
set textwidth=0

" Break lines at whitespace or special characters (when tw != 0). Avoids lines
" where a word shows up on both the right and left edges of the screen. Which
" makes copy/paste into other apps FUN. Screws up coding. Off normally. makes
" copy/paste into other apps FUN. Screws up coding. Off normally.
set nolinebreak

" Backspace over indentation, end-of-line, and start-of-line.
set backspace=indent,eol,start

" What to store from an editing session in the viminfo file.
" Can be used at next session.
set viminfo=%,'50,\"100,:100,n~/.viminfo

" Highlight matches, and use incremental search
set hlsearch
set incsearch

" Ignore case in search patterns unless an uppercase character is used
" in the search, then pay attention to case.
set ignorecase
set smartcase

" Turn off vim's default regex and use normal regexes (behaves more
" like Perl regex now...) - this is 'very magic' mode. Only alphanumerics
" and underscore are *not* quoted with backslash. See ':help magic'.
"
" Disabling this for now because it doesn't affect :s (but 'magic' does).
" It's better for the two to match, just rely on 'magic' for both.
"nnoremap / /\v
"vnoremap / /\v
"nnoremap ? ?\v
"vnoremap ? ?\v

" Use 'magic' patterns (extended regex) in search patterns. ('\s\+').
" This isn't used by the / search due to the / remaps. For :s and :g.
set magic

" Do not show invisibles by default.
set nolist

" How to display tabs, EOL, and other invisibles.
if has('multi_byte')
    set encoding=utf-8
    set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
else
    set listchars=tab:>-,eol:$,extends:>,precedes:<
endif

" Keystroke used for 'expansion' on the command line. Default is <c-e>.
set wildchar=<tab>

" Show me more than the first possible completion.
set wildmenu

" Behave like a shell, show me completion only to point of ambiguity.
set wildmode=list:longest

" Create new windows below/at right of current one, if no direction was specified.
set splitbelow
set splitright

" List of directories to search when I specify a file with an edit command.
set path=.

" Ignore filename with any of these suffixes when using :edit
set suffixes=.gz,.swp,.tar,.tgz,.dmg

let &shell='/bin/sh'

" Automatically save modifications to files when you use
" critical (external) commands.
set autowrite

" Color scheme
let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1
  \     }
  \   }
  \ }

set background=dark
colorscheme PaperColor

" Mark Git-style conflict markers, and trailing whitespace.
match ErrorMsg '\(\s\+$\|\(^\(<\|=\|>\)\{7\}\([^=].\+\)\?$\)\)'

" 'syntax enable' will turn on syntax highlighting without wiping out
" any highlight commands already in place. 'syntax on' will reset it
" all to defaults. So I use 'syntax on' and put my highlight commands
" after this point, that way I can ':so ~/.vimrc' and reset everything
" whenever I want.
syntax on

" When positioned on a bracket, highlight its partner.
set showmatch

" Modelines have security problems. Disable.
set nomodeline
set modelines=0

" line numbering
set number
set relativenumber

" keep some context on screen
set scrolloff=4

{% if ansible_distribution == 'MacOSX' %}
" interact with the system paste buffer
nnoremap <leader>y "+y
vnoremap <leader>y "+y

nnoremap <leader>Y "+Y

nnoremap <leader>p "+p
vnoremap <leader>p "+p

nnoremap <leader>P "+P
vnoremap <leader>P "+P
{% else %}
" tell user the paste buffer is not available here.
" the 'v' variants don't output the text anyway, don't bother mapping them
nnoremap <leader>y :echo 'system pasteboard not available'<CR>
nnoremap <leader>Y :echo 'system pasteboard not available'<CR>
nnoremap <leader>p :echo 'system pasteboard not available'<CR>
nnoremap <leader>P :echo 'system pasteboard not available'<CR>
{% endif %}

" jump to explorer (netrw)
nnoremap <leader>e :Ex<CR>

" toggle undotree panel
nnoremap <leader>u :UndotreeToggle<CR>

" Makefile requires real tabs, not spaces, enforce that
autocmd BufNewFile,BufRead [Mm]akefile* set filetype=make
autocmd Filetype make setlocal noexpandtab

autocmd BufNewFile,BufRead *.md set filetype=ghmarkdown
autocmd BufNewFile,BufRead *.t set filetype=perl
autocmd BufNewFile,BufRead *.tt2 set filetype=tt2html
autocmd BufNewFile,BufRead *.eyaml set filetype=yaml
autocmd FileType yaml setlocal expandtab ts=2 sts=2 sw=2

" Override this file without modifying the master copy in git.
if filereadable($HOME . '/.vimrc.local')
    source ~/.vimrc.local
endif

